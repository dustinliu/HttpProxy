apply plugin: 'java'
apply plugin: 'groovy'
apply plugin: 'checkstyle'
apply plugin: 'pmd'

group = 'dustinl'
version = '1.0.0'

description = """HttpProxy"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
     maven { url "http://repo.maven.apache.org/maven2" }
}

dependencies {
    compile group: 'io.netty', name: 'netty-all', version:'4.0.28.Final'
    compile group: 'org.slf4j', name: 'slf4j-api', version:'1.7.12'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version:'1.7.12'
    compile group: 'com.ning', name: 'async-http-client', version:'1.9.25'
    compile group: 'com.typesafe', name: 'config', version:'1.3.0'
    runtime files('conf')
    testCompile group: 'org.spockframework', name: 'spock-core', version:'1.0-groovy-2.4'
    testCompile group: 'junit', name: 'junit', version:'4.12'
    testCompile group: 'cglib', name: 'cglib-nodep', version:'3.1'
    testCompile 'info.cukes:cucumber-groovy:1.2.2'
    testCompile 'info.cukes:cucumber-junit:1.2.2'
}

def checkstyle_config = new File(rootDir, "checkstyle.xml")
def checkstyle_url = new URL('https://raw.githubusercontent.com/dustinliu/java_style/master/checkstyle.xml')
def pmd_config = new File(rootDir, "pmd.xml")
def pmd_url = new URL('https://raw.githubusercontent.com/dustinliu/java_style/master/pmd.xml')

checkstyle {
    configFile = checkstyle_config
    toolVersion = '6.6'
}

pmd {
    consoleOutput = true
    ruleSetFiles = files(pmd_config)
    toolVersion = '5.3.2'
}

task cucumber {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'pretty', '--glue', 'gradle.cucumber', 'src/test/resources']
        }
    }
}

task fetchRules {
    checkstyle_url.withInputStream{ i -> checkstyle_config.withOutputStream{ it << i }}
    pmd_url.withInputStream{ i -> pmd_config.withOutputStream{ it << i }}
}

check.dependsOn fetchRules

task packaging(type: Tar, dependsOn: jar) {
    baseName project.name
    compression Compression.GZIP
    def root = "${baseName}-${version}"

    from('build/libs/') { into "${root}/libs" }
    from(configurations.compile) { into "${root}/libs" }
    from(configurations.runtime) { into "${root}/libs" }
    from('conf/application.conf') { into "${root}/conf" }
    from('src/bin/dustinl_proxy.sh') { into "${root}/bin" }
}

jar.dependsOn test
packaging.dependsOn jar, check
